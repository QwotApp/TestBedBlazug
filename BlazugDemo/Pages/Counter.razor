@page "/counter"
@inject ILogger<Counter> _logger
@inject BlazugLib.Controls Blazug;


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<button class="btn btn-primary" @onclick="ShowHide">@(BlazugVisible ? "Hide Blazug" : "Show Blazug")</button>

<button class="btn btn-primary" @onclick="@(async () => await DownloadLogs())">Download Logs</button>



@code {

    private int currentCount = 0;

    private static Timer TimerTicks = new Timer(3000);

    private int ticks = 0;

    private bool BlazugVisible = true;



    protected override void OnInitialized()
    {
        base.OnInitialized();

        WriteLogToConsole();

        CreateBlazugControls();
    }


    private void WriteLogToConsole()
    {
        // fowarded as 'log' to console
        Console.WriteLine("from Console.WriteLine()"); 

        // fowarded as 'info' to console
        _logger.LogInformation("from _logger.LogInformation()"); 

        // fowarded as 'warn' to console
        _logger.LogWarning("from _logger.LogWarning()"); 

        // fowarded as 'error' to console
        _logger.LogError("from _logger.LogError()"); 

        // fowarded as 'error' to console (and raise a blazor exception.)
        //_logger.LogCritical("from _logger.LogCritical()"); 

        // not fowarded to console
        _logger.LogDebug("from _logger.LogDebug()"); 

        // not fowarded to console
        _logger.LogTrace("from _logger.LogTrace()"); 



        // log a dotnet object

        var logObject = new { Value1 = 123.56f, Value2 = "foobar" };

        _logger.LogInformation($"logObject {logObject}"); 
    }

    private void CreateBlazugControls()
    {

        // Blazug buttons actions

        Blazug.CreateButton("counter", "Decrement", OnDecrement);

        Blazug.CreateSwitch("switch", true, "On", "Off", OnSwitched);

        Blazug.CreateRadioButtons("radio", 1, new() {"Light","Dark","Black"}, OnRadioChanged);

        // Display a blazug Text

        TimerTicks.Elapsed += (sender, e) => { Blazug.DisplayText("timer", $"Ticks : {ticks++}"); /*Console.WriteLine($"ticks {ticks}");*/ };

        TimerTicks.Start();

    }


    private void IncrementCount()
    {

        currentCount++;

    }

    private void ShowHide()
    {
        BlazugVisible = !BlazugVisible;

        Blazug.Show(BlazugVisible);
    }

    protected void OnDecrement()
    {
        currentCount--;

        StateHasChanged();
    }

    protected async ValueTask OnSwitched(bool state)
    {
        if(state == true)
        {
            await Task.Delay(1000); // illustrate async ValueTask

            Blazug.DisplayText("switch", "Delayed: " + state.ToString());
        }
        else
        {
            Blazug.DisplayText("switch", "State: " + state.ToString());
        }

    }

    protected async Task OnRadioChanged(int index)
    {
        Blazug.DisplayText("Radio", "Index: " + index.ToString());

        await Task.CompletedTask; // illustrate async Task
    }

    protected async Task DownloadLogs()
    {
        var strlogs = await Blazug.GetLogsAsync();

        await Blazug.DownloadString("blazug.log", strlogs);

    }

}