@inject IJSRuntime JS
@inject Blazug.Controls Debug;


<div class="debug-window">

    <div class="debug-btn-container">
        <button class="debug-btn" @onclick="ToggleDebug">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                <!--! Font Awesome Free 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. -->
                <path class="debug-btn-svg" d="M352 96V99.56C352 115.3 339.3 128 323.6 128H188.4C172.7 128 159.1 115.3 159.1 99.56V96C159.1 42.98 202.1 0 255.1 0C309 0 352 42.98 352 96zM41.37 105.4C53.87 92.88 74.13 92.88 86.63 105.4L150.6 169.4C151.3 170 151.9 170.7 152.5 171.4C166.8 164.1 182.9 160 199.1 160H312C329.1 160 345.2 164.1 359.5 171.4C360.1 170.7 360.7 170 361.4 169.4L425.4 105.4C437.9 92.88 458.1 92.88 470.6 105.4C483.1 117.9 483.1 138.1 470.6 150.6L406.6 214.6C405.1 215.3 405.3 215.9 404.6 216.5C410.7 228.5 414.6 241.9 415.7 256H480C497.7 256 512 270.3 512 288C512 305.7 497.7 320 480 320H416C416 344.6 410.5 367.8 400.6 388.6C402.7 389.9 404.8 391.5 406.6 393.4L470.6 457.4C483.1 469.9 483.1 490.1 470.6 502.6C458.1 515.1 437.9 515.1 425.4 502.6L362.3 439.6C337.8 461.4 306.5 475.8 272 479.2V240C272 231.2 264.8 224 255.1 224C247.2 224 239.1 231.2 239.1 240V479.2C205.5 475.8 174.2 461.4 149.7 439.6L86.63 502.6C74.13 515.1 53.87 515.1 41.37 502.6C28.88 490.1 28.88 469.9 41.37 457.4L105.4 393.4C107.2 391.5 109.3 389.9 111.4 388.6C101.5 367.8 96 344.6 96 320H32C14.33 320 0 305.7 0 288C0 270.3 14.33 256 32 256H96.3C97.38 241.9 101.3 228.5 107.4 216.5C106.7 215.9 106 215.3 105.4 214.6L41.37 150.6C28.88 138.1 28.88 117.9 41.37 105.4H41.37z"/>
            </svg>
        </button>
    </div>

    <div class="debug-inspector" hidden="@ShowInspector">
          @*

         <div class="debug-item">
            <div class="debug-title-tip"><strong>aaa</strong></div>
            <div class="debug-control debug-control-padding" >bbbb</div>
        </div>

      <div class="debug-item">
            <div class="debug-title-tip"><strong>aaa</strong></div>
            <div class="debug-control debug-control-padding" >bbbb</div>
        </div>


        <div class="debug-item">
            <div class="debug-title-tip"><strong>aaa</strong></div>
            <div class="debug-control" >
                <button class="simple-button">
                    bbbb
                </button>

            </div>
        </div>


        <div class="debug-item">
            <div class="debug-title-tip"><strong>aaa</strong></div>
            <div class="debug-control" >

                <span class="toggle-radio">
	                <input type="radio" name="mode" id="mode1" value="mode1">
	                <label for="mode1">Mode 1</label>

                    <input type="radio" name="mode" id="mode2" value="mode2">
	                <label for="mode2">Mode 2</label>

	                <input type="radio" name="mode" id="mode3" value="mode3">
	                <label for="mode3">Mode 3</label>

                </span>
            </div>
        </div>



        <div class="debug-item">
            <div class="debug-title-tip">
                <strong>aaa</strong>
            </div>
            <div class="debug-control  debug-control-padding" >
                <label class="switch">
                  <input type="checkbox">
                  <span class="slider">
                  </span>
                </label>
                <span class="switch-label">
                  coucou
                </span>
             </div>
        </div>*@


    </div>


    <div class="debug-console" hidden="@ShowConsole">


    </div>

        


</div>



@code {


    [Parameter]
    public int MaxLogs { get; set; }


    private int ToggleState {get;set;} = 0;
    private bool ShowInspector {get;set;} = true;
    private bool ShowConsole {get;set;} = true;

    //private static System.Timers.Timer? aTimer;

    //private int counter = 0;
    //private int ticks = 0;

    //private int rollLevel = 0;

    private void ToggleDebug()
    {
        ToggleState = ++ToggleState % 3;

        switch(ToggleState)
        {
            case 0:
                ShowInspector = true;
                ShowConsole = true;
                break;
            case 1:
                ShowInspector = false;
                ShowConsole = true;
                break;
            case 2:
                ShowInspector = true;
                ShowConsole = false;
                break;
        };

    }

    //protected override void OnInitialized()
    //{
    //    Debug.Init(MaxLogs);
    //}

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Blazug1");
        await Debug.InitAsync(MaxLogs);
        Console.WriteLine("Blazug2");
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //         await Debug.Init(MaxLogs);
    //    }
    //}


    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();

    //    aTimer = new System.Timers.Timer(1000);

    //    aTimer.Elapsed += async (sender,  e) =>
    //        {

    //            await Blazug.DisplayText("Timer", $"DisplayText : {ticks++}" );

    //            rollLevel = ++rollLevel % 7;

    //            switch(rollLevel)
    //            {
    //                case 0:
    //                    Console.WriteLine($"Console.WriteLine : {rollLevel} {ticks++}"); // OK: fowarded as 'log' to console
    //                    break;

    //                case 1:
    //                    _logger.LogWarning($"LogWarning : {rollLevel} {ticks++}"); // OK: fowarded as 'warn' to console
    //                    break;

    //                case 2:
    //                    _logger.LogError($"LogError : {rollLevel} {ticks++}"); // OK: fowarded as 'err' to console
    //                    break;

    //                case 3:
    //                    _logger.LogCritical($"LogCritical : {rollLevel} {ticks++}"); // OK: fowarded as 'err' to console
    //                    break;

    //                case 4:
    //                    _logger.LogInformation($"LogInformation : {rollLevel} {ticks++}"); // BAD: fowarded to console but not catched by blazug
    //                    break;

    //                case 5:
    //                    _logger.LogDebug($"LogDebug : {rollLevel} {ticks++}"); // BAD: not fowarded to console
    //                    break;

    //                case 6:
    //                    _logger.LogTrace($"LogTrace {rollLevel} {ticks++}"); // BAD: not fowarded to console
    //                    break;

    //            }



    //        };

    //    aTimer.Enabled = true;
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //       // await Blazug.Init(MaxLogs);

    //        //await Blazug.CreateButton("up", "Increment", () => ++counter);

    //        //await Blazug.CreateButton("down", "Decrement", OnDecrement);

    //        //await Blazug.CreateSwitch("toggle", true, "On", "Off", OnSwitched_1);

    //        //await Blazug.CreateRadio("radio 1", 1, new() {"Light","Dark","Black"}, OnRadioChange_1);


    //        //await Blazug.CreateSwitch("toggleA", true, "On", "Off", (state) => counter++);
    //        //await Blazug.CreateSwitch("toggleB", true, "On", "Off", (state) => counter++);
    //        //await Blazug.CreateSwitch("toggleC", true, "On", "Off", (state) => counter++);
    //        //await Blazug.CreateSwitch("toggleD", true, "On", "Off", (state) => counter++);
    //        //await Blazug.CreateSwitch("toggleE", true, "On", "Off", (state) => counter++);
    //        //await Blazug.CreateSwitch("toggleF", true, "On", "Off", (state) => counter++);



    //        //await Blazug.DisplayText("minsize h1", "half", DebugItemMinSize.Half);
    //        //await Blazug.DisplayText("minsize h2", "half", DebugItemMinSize.Half);
    //        //await Blazug.DisplayText("minsize h3", "half", DebugItemMinSize.Half);
    //        //await Blazug.DisplayText("minsize f", "full", DebugItemMinSize.Full);

            
            

    //        //await Blazug.DisplayText("minsize X", "OneThird", DebugItemMinSize.OneThird);
    //        //await Blazug.DisplayText("minsize Y", "ThreeThird", DebugItemMinSize.ThreeThird);
    //        //await Blazug.DisplayText("minsize Z", "OneThird", DebugItemMinSize.OneThird);
    //        //await Blazug.DisplayText("minsize W", "ThreeThird", DebugItemMinSize.ThreeThird);

    //        //await Blazug.DisplayText("minsize A", "OneThird", DebugItemMinSize.OneThird);
    //        //await Blazug.DisplayText("minsize B", "OneThird", DebugItemMinSize.OneThird);
    //        //await Blazug.DisplayText("minsize C", "OneThird", DebugItemMinSize.OneThird);
    //        //await Blazug.DisplayText("minsize D", "OneThird", DebugItemMinSize.OneThird);


    //    }
    //}



    //protected void OnDecrement()
    //{
    //    --counter;
    //}

    //protected async Task OnSwitched_1(bool state)
    //{
    //    await Blazug.DisplayText("Switched", state.ToString());
    //}
    
    //protected async Task OnRadioChange_1(int index)
    //{
    //    await Blazug.DisplayText("RadioChanged", index.ToString());
    //}

}

