@inject Blazug.Controls Dbg;
@inject ILogger<Index> _logger

@page "/"

<PageTitle>Counter</PageTitle>


<div theme="@theme">

    <h1>Counter</h1>

    <p role="status">Current count: @currentCount</p>

    <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

    <img src="/beetle.svg" alt="share-quote" loading="lazy" hidden="@(!@imageVisibility)">

</div>


@code {
    private int currentCount = 0;
    private bool imageVisibility = false;
    private string theme = "light";

    private async Task IncrementCount()
    {
        currentCount++;

        await Dbg.DisplayTextAsync("counter-async", $"{currentCount}");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _logger.LogWarning("coucou11");
            Console.WriteLine("coucou1");

            await Dbg.DisplayTextAsync("counter-async", $"{currentCount}");

            _logger.LogWarning("coucou22");
            Console.WriteLine("coucou2");

            await Dbg.CreateButtonAsync("button-async", "decrement", OnDecrement );


            _logger.LogWarning("coucou33");
            Console.WriteLine("coucou3");

            await Dbg.CreateSwitchAsync("image-async", imageVisibility, "visible", "hidden", OnToggleImageVisibility, Blazug.ControlSize.OneThird);

            _logger.LogWarning("coucou44");
            Console.WriteLine("coucou4");

            await Dbg.CreateRadioButtonsAsync("theme-async", 0, new() {"Light","Dark","Black"}, OnThemeXChange);

            _logger.LogWarning("coucou55");
            Console.WriteLine("coucou5");


            await Task.Run(async () => { await Task.Delay(1000);_logger.LogWarning("coucou66");Console.WriteLine("coucou6"); });

        }
    }

    private async Task OnDecrement()
    {
        currentCount--;

        StateHasChanged();

        await Dbg.DisplayTextAsync("counter-async", $"{currentCount}");
    }

    private void OnToggleImageVisibility(bool state)
    {
        imageVisibility = state;

        StateHasChanged();
    }


    protected void OnThemeXChange(int index)
    {
        theme = index switch
        {
            1 => "dark",
            2 => "black",
            _ => "light"
        };

         StateHasChanged();
    }



}